% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SCB_ADMM_speed.R
\name{sparse.biADMM.speed}
\alias{sparse.biADMM.speed}
\title{faster version of Sparse Convex Biclustering Algorithm}
\usage{
sparse.biADMM.speed(
  X,
  nu1,
  nu2,
  nu3,
  gamma_1,
  gamma_2,
  gamma_3,
  feature_weight = rep(1, ncol(X)),
  m = 5,
  phi = 0.5,
  niter = 1000,
  tol = 0.1,
  output = 1
)
}
\arguments{
\item{X}{The data matrix to be clustered. The rows are the samples, and the columns are the features.}

\item{nu1}{A turning parameter for the augmented term for fusing-row  shrinkage}

\item{nu2}{A turning parameter for the augmented term for fusing-column  shrinkage}

\item{nu3}{A turning parameter for the augmented term for feature selection shrinkage}

\item{gamma_1}{A regularization parameter for fusing-row shrinkage}

\item{gamma_2}{A regularization parameter for fusing-column shrinkage}

\item{gamma_3}{A regularization parameter for feature selection shrinkage}

\item{m}{m-nearest-neighbors in the weight function}

\item{phi}{The parameter phi in the weight function}

\item{tol}{Stopping criterion}

\item{output}{When output = 1, print the results at each iteration. No print when output equals other value.}

\item{feature.weight}{The adaptive weight}

\item{niters}{Max iteration times}
}
\value{
A list of results, containing matrix of A, v, z, lambda1, and lambda2
}
\description{
Same algorithm as \code{sparse.biADMM}. Call python code to speed up the running time. Note that please get the py file in 'inst' fold.
}
\examples{
\donttest{
# generate dataset
set.seed(123)
X = data_gen(n = 100, true_p=40, p = 80)
# set parameters
nu1 = nu2 = nu3 = gamma_1 = gamma_2 = gamma_3 = 0.1
m = 5
phi = 0.5
# sparse.biADMM algorithm
res2 = sparse.biADMM.speed(X,
nu1, nu2, nu3, gamma_1, gamma_2, gamma_3,
feature_weight = rep(1,ncol(X)),
m, phi, niter = 10, tol = 0.0001, output = 0)
dim(res2$A)
}
}
