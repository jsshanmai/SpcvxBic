% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SCB_ADMM_speed_WS.R
\name{sparse.biADMM.speed.WS}
\alias{sparse.biADMM.speed.WS}
\title{SCB-ADMM-WSï¼šSCB Algorithm with Warm-Start}
\usage{
sparse.biADMM.speed.WS(
  X,
  A = NULL,
  nu1,
  nu2,
  nu3,
  v = NULL,
  z = NULL,
  g = NULL,
  gamma_1,
  gamma_2,
  gamma_3,
  feature_weight = rep(1, ncol(X)),
  m = 5,
  phi = 0.5,
  niter = 1000,
  tol = 0.1,
  output = 1
)
}
\arguments{
\item{X}{The data matrix to be clustered. The rows are the samples, and the columns are the features.}

\item{A}{Initial value of A. Using the result of previous grid point as Warm-Start to speed up. Note that A,v,g,z needs to be filled in at the same time.}

\item{nu1}{A regularization parameter for row shrinkage}

\item{nu2}{A regularization parameter for column shrinkage}

\item{nu3}{A parameter for sparsity}

\item{v}{Initial value of v}

\item{z}{Initial value of z}

\item{g}{Initial value of g}

\item{gamma_1}{A regularization parameter for row shrinkage}

\item{gamma_2}{A regularization parameter for column shrinkage}

\item{gamma_3}{A parameter for sparsity}

\item{m}{m-nearest-neighbors in the weight function}

\item{phi}{The parameter phi in the weight function}

\item{tol}{Stopping criterion}

\item{output}{When output = 1, print the results at each iteration. No print when output equals other value.}

\item{niters}{Max iteraion times}
}
\value{
A list of results, containing matrix of A, v, z, lambda1, lambda2, lambda_3 and iters
}
\description{
Similar algorithm as \code{sparse.biADMM.speed}, add initial values for A,v,g,z to speed up the running time.
Note that A,v,g,z needs to be filled in at the same time.
}
\examples{
# generate dataset
set.seed(123)
X = data_gen(n = 100, p = 80 , true_p = 40)
# set parameters
nu1 = nu2 = nu3 = gamma_1 = gamma_2 = gamma_3 = 0.1
m = 5
phi = 0.5
# Without fill A,v,g,z
res1 = sparse.biADMM.speed.WS(X, A= NULL, nu1, nu2, nu3,v=NULL ,z=NULL ,g=NULL ,gamma_1, gamma_2, gamma_3,
                             feature_weight = rep(1,ncol(X)), m , phi,niter = 2000,tol = 1e-6,output = 0)
# change some parameters, use previous results as initial values
gamma_1 = gamma_2 = 0.5
res2 = sparse.biADMM.speed.WS(X, A= res1$A, nu1, nu2, nu3,v=res1$v ,z=res1$z ,g=res1$g ,gamma_1, gamma_2, gamma_3,
                             feature_weight = rep(1,ncol(X)), m , phi,niter = 2000,tol = 1e-6,output = 0)
#A rough comparison of computational efficiency
print (res1$iters)
print (res2$iters)
dim(res2$A)
}
